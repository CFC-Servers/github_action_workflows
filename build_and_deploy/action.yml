name: Build and Deploy
description: "Builds the Docker image for the project and then deploys to the server"
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.GH_TOKEN }}

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(git describe --abbrev=0 --tags `git rev-list --tags --max-count=1`)

    - name: Lowercase repository name
      id: repository_name
      uses: ASzc/change-string-case-action@v1
      with:
        string: ${{ github.repository }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ghcr.io/${{ steps.repository_name.outputs.lowercase }}:latest
          ghcr.io/${{ steps.repository_name.outputs.lowercase }}:${{ steps.get_version.outputs.VERSION }}
        secrets: |
          GIT_AUTH_TOKEN=${{ secrets.GH_TOKEN }}

    - name: SSH and deploy container
      uses: CFC-Servers/ssh-action@v0.1.3
      env:
        DEPLOYMENT_DIR: ${{ secrets.DEPLOYMENT_DIR }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.GH_TOKEN }}
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        envs: DEPLOYMENT_DIR,DOCKER_USERNAME,DOCKER_PASSWORD
        script_stop: true
        script: |
          cd $DEPLOYMENT_DIR
          git fetch --all
          git pull
          docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" ghcr.io
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans

          # Clean up orphaned images
          docker image prune -af

    - uses: CFC-Servers/github_action_workflows/discord_alert@feature/composite
